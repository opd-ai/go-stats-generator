package reporter

import (
	"fmt"
	"io"
	"strings"
	"text/template"
	"time"

	"github.com/opd-ai/go-stats-generator/internal/metrics"
)

// MarkdownReporter generates Markdown reports for Git workflows
type MarkdownReporter struct {
	includeOverview bool
	includeDetails  bool
	maxItems        int
}

// NewMarkdownReporter creates a new Markdown reporter with default settings
func NewMarkdownReporter() Reporter {
	return &MarkdownReporter{
		includeOverview: true,
		includeDetails:  true,
		maxItems:        50, // Limit to prevent extremely long reports
	}
}

// NewMarkdownReporterWithOptions creates a Markdown reporter with custom options
func NewMarkdownReporterWithOptions(includeOverview, includeDetails bool, maxItems int) *MarkdownReporter {
	return &MarkdownReporter{
		includeOverview: includeOverview,
		includeDetails:  includeDetails,
		maxItems:        maxItems,
	}
}

// Generate generates a comprehensive Markdown report
func (mr *MarkdownReporter) Generate(report *metrics.Report, output io.Writer) error {
	// Create template with helper functions
	tmpl, err := template.New("markdown-report").Funcs(template.FuncMap{
		"formatDuration": mr.formatDuration,
		"formatFloat":    mr.formatFloat,
		"formatPercent":  mr.formatPercent,
		"truncateList":   mr.truncateList,
		"escapeMarkdown": mr.escapeMarkdown,
	}).Parse(markdownTemplate)

	if err != nil {
		return fmt.Errorf("failed to parse markdown template: %w", err)
	}

	// Execute template with report data
	return tmpl.Execute(output, map[string]interface{}{
		"Report":          report,
		"IncludeOverview": mr.includeOverview,
		"IncludeDetails":  mr.includeDetails,
		"MaxItems":        mr.maxItems,
	})
}

// WriteDiff generates a Markdown diff report comparing two snapshots
func (mr *MarkdownReporter) WriteDiff(output io.Writer, diff *metrics.ComplexityDiff) error {
	tmpl, err := template.New("markdown-diff").Funcs(template.FuncMap{
		"formatDuration":   mr.formatDuration,
		"formatFloat":      mr.formatFloat,
		"formatPercent":    mr.formatPercent,
		"formatChange":     mr.formatChange,
		"formatChangeSign": mr.formatChangeSign,
		"escapeMarkdown":   mr.escapeMarkdown,
	}).Parse(markdownDiffTemplate)

	if err != nil {
		return fmt.Errorf("failed to parse markdown diff template: %w", err)
	}

	return tmpl.Execute(output, diff)
}

// Template helper functions

func (mr *MarkdownReporter) formatDuration(d time.Duration) string {
	if d < time.Millisecond {
		return fmt.Sprintf("%.2fμs", float64(d.Nanoseconds())/1000)
	}
	if d < time.Second {
		return fmt.Sprintf("%.2fms", float64(d.Nanoseconds())/1000000)
	}
	return fmt.Sprintf("%.2fs", d.Seconds())
}

func (mr *MarkdownReporter) formatFloat(f float64) string {
	if f == float64(int(f)) {
		return fmt.Sprintf("%.0f", f)
	}
	return fmt.Sprintf("%.2f", f)
}

func (mr *MarkdownReporter) formatPercent(f float64) string {
	return fmt.Sprintf("%.1f%%", f*100)
}

func (mr *MarkdownReporter) formatChange(oldVal, newVal float64) string {
	if oldVal == 0 {
		if newVal == 0 {
			return "no change"
		}
		return "new"
	}

	change := ((newVal - oldVal) / oldVal) * 100
	if change > 0 {
		return fmt.Sprintf("+%.1f%%", change)
	} else if change < 0 {
		return fmt.Sprintf("%.1f%%", change)
	}
	return "no change"
}

func (mr *MarkdownReporter) formatChangeSign(change float64) string {
	if change > 0 {
		return "📈"
	} else if change < 0 {
		return "📉"
	}
	return "➡️"
}

func (mr *MarkdownReporter) truncateList(items interface{}, limit int) interface{} {
	switch v := items.(type) {
	case []metrics.FunctionMetrics:
		if len(v) <= limit {
			return v
		}
		return v[:limit]
	case []metrics.StructMetrics:
		if len(v) <= limit {
			return v
		}
		return v[:limit]
	case []metrics.InterfaceMetrics:
		if len(v) <= limit {
			return v
		}
		return v[:limit]
	case []metrics.PackageMetrics:
		if len(v) <= limit {
			return v
		}
		return v[:limit]
	default:
		return items
	}
}

func (mr *MarkdownReporter) escapeMarkdown(s string) string {
	// Escape special Markdown characters that could break formatting
	replacer := strings.NewReplacer(
		"*", "\\*",
		"_", "\\_",
		"`", "\\`",
		"#", "\\#",
		"[", "\\[",
		"]", "\\]",
		"(", "\\(",
		")", "\\)",
		"|", "\\|",
	)
	return replacer.Replace(s)
}

// markdownTemplate defines the main report template
const markdownTemplate = `# Go Code Analysis Report

> Generated by **go-stats-generator** {{.Report.Metadata.ToolVersion}} on {{.Report.Metadata.GeneratedAt.Format "2006-01-02 15:04:05"}}

## 📊 Overview

| Metric | Value |
|--------|-------|
| **Repository** | {{escapeMarkdown .Report.Metadata.Repository}} |
| **Analysis Duration** | {{formatDuration .Report.Metadata.AnalysisTime}} |
| **Files Processed** | {{.Report.Metadata.FilesProcessed}} |
| **Go Version** | {{.Report.Metadata.GoVersion}} |
| **Total Lines of Code** | {{.Report.Overview.TotalLinesOfCode}} |
| **Total Functions** | {{.Report.Overview.TotalFunctions}} |
| **Total Methods** | {{.Report.Overview.TotalMethods}} |
| **Total Structs** | {{.Report.Overview.TotalStructs}} |
| **Total Interfaces** | {{.Report.Overview.TotalInterfaces}} |
| **Total Packages** | {{.Report.Overview.TotalPackages}} |

{{if .IncludeDetails}}
{{if .Report.Functions}}
## 🔧 Functions

{{$functions := truncateList .Report.Functions .MaxItems}}
| Function | Package | Lines | Complexity | Exported | Documentation |
|----------|---------|-------|------------|----------|---------------|
{{range $functions}}| {{escapeMarkdown .Name}} | {{escapeMarkdown .Package}} | {{.Lines.Code}} | {{formatFloat .Complexity.Overall}} | {{if .IsExported}}✅{{else}}❌{{end}} | {{formatPercent .Documentation.QualityScore}} |
{{end}}{{if gt (len .Report.Functions) .MaxItems}}
*Showing top {{.MaxItems}} functions out of {{len .Report.Functions}}*
{{end}}
{{end}}

{{if .Report.Structs}}
## 🏗️ Structs

{{$structs := truncateList .Report.Structs .MaxItems}}
| Struct | Package | Fields | Methods | Complexity | Exported |
|--------|---------|--------|---------|------------|----------|
{{range $structs}}| {{escapeMarkdown .Name}} | {{escapeMarkdown .Package}} | {{len .Fields}} | {{len .Methods}} | {{formatFloat .ComplexityScore}} | {{if .IsExported}}✅{{else}}❌{{end}} |
{{end}}{{if gt (len .Report.Structs) .MaxItems}}
*Showing top {{.MaxItems}} structs out of {{len .Report.Structs}}*
{{end}}
{{end}}

{{if .Report.Interfaces}}
## 🔌 Interfaces

{{$interfaces := truncateList .Report.Interfaces .MaxItems}}
| Interface | Package | Methods | Implementations | Complexity | Exported |
|-----------|---------|---------|----------------|------------|----------|
{{range $interfaces}}| {{escapeMarkdown .Name}} | {{escapeMarkdown .Package}} | {{.MethodCount}} | {{.ImplementationCount}} | {{formatFloat .ComplexityScore}} | {{if .IsExported}}✅{{else}}❌{{end}} |
{{end}}{{if gt (len .Report.Interfaces) .MaxItems}}
*Showing top {{.MaxItems}} interfaces out of {{len .Report.Interfaces}}*
{{end}}
{{end}}

{{if .Report.Packages}}
## 📦 Packages

{{$packages := truncateList .Report.Packages .MaxItems}}
| Package | Files | Functions | Structs | Interfaces | Dependencies |
|---------|-------|-----------|---------|------------|--------------|
{{range $packages}}| {{escapeMarkdown .Name}} | {{len .Files}} | {{len .Functions}} | {{len .Structs}} | {{len .Interfaces}} | {{len .Dependencies}} |
{{end}}{{if gt (len .Report.Packages) .MaxItems}}
*Showing top {{.MaxItems}} packages out of {{len .Report.Packages}}*
{{end}}
{{end}}

{{if .Report.Patterns.ConcurrencyPatterns}}
## ⚡ Concurrency Patterns

| Pattern Type | Count | Details |
|--------------|-------|---------|
| **Goroutines** | {{len .Report.Patterns.ConcurrencyPatterns.Goroutines.Instances}} | {{if .Report.Patterns.ConcurrencyPatterns.Goroutines.GoroutineLeaks}}⚠️ {{len .Report.Patterns.ConcurrencyPatterns.Goroutines.GoroutineLeaks}} potential leaks{{else}}✅ No leaks detected{{end}} |
| **Channels** | {{len .Report.Patterns.ConcurrencyPatterns.Channels.Instances}} | Communication patterns detected |
| **Worker Pools** | {{len .Report.Patterns.ConcurrencyPatterns.WorkerPools}} | Concurrent processing patterns |
| **Pipelines** | {{len .Report.Patterns.ConcurrencyPatterns.Pipelines}} | Data flow patterns |
| **Semaphores** | {{len .Report.Patterns.ConcurrencyPatterns.Semaphores}} | Resource limiting patterns |
| **Mutexes** | {{len .Report.Patterns.ConcurrencyPatterns.SyncPrims.Mutexes}} | Synchronization primitives |
| **WaitGroups** | {{len .Report.Patterns.ConcurrencyPatterns.SyncPrims.WaitGroups}} | Goroutine coordination |

{{if .Report.Patterns.ConcurrencyPatterns.Goroutines.GoroutineLeaks}}
### ⚠️ Potential Goroutine Leaks
{{range .Report.Patterns.ConcurrencyPatterns.Goroutines.GoroutineLeaks}}
- **{{escapeMarkdown .Function}}**: {{escapeMarkdown .Reason}} (Risk: {{.RiskLevel}})
{{end}}
{{end}}
{{end}}
{{end}}

## 📈 Analysis Summary

This report provides comprehensive metrics for the Go codebase analysis. Key insights:

- **Code Quality**: {{if ge .Report.Documentation.Coverage.Overall 0.8}}Good documentation coverage ({{formatPercent .Report.Documentation.Coverage.Overall}}){{else}}Consider improving documentation ({{formatPercent .Report.Documentation.Coverage.Overall}}){{end}}
- **Complexity**: {{if le .Report.Complexity.AverageFunction 10.0}}Manageable complexity levels{{else}}Consider refactoring high-complexity functions{{end}}
- **Architecture**: {{len .Report.Packages}} packages analyzed with dependency tracking

---
*Report generated by [go-stats-generator](https://github.com/opd-ai/go-stats-generator) - A comprehensive Go code analysis tool*`

// markdownDiffTemplate defines the diff report template
const markdownDiffTemplate = `# Code Analysis Comparison Report

> Comparing **{{.Baseline.ID}}** vs **{{.Current.ID}}** | Generated on {{.Timestamp.Format "2006-01-02 15:04:05"}}

## 📊 Summary

| Metric | Change |
|--------|---------|
| **Functions** | {{formatChangeSign .Summary.TotalFunctionChanges}} {{formatChange (float64 .Baseline.Report.Overview.TotalFunctions) (float64 .Current.Report.Overview.TotalFunctions)}} |
| **Lines of Code** | {{formatChangeSign .Summary.TotalLinesChanges}} {{formatChange (float64 .Baseline.Report.Overview.TotalLinesOfCode) (float64 .Current.Report.Overview.TotalLinesOfCode)}} |
| **Structs** | {{formatChangeSign .Summary.TotalStructChanges}} {{formatChange (float64 .Baseline.Report.Overview.TotalStructs) (float64 .Current.Report.Overview.TotalStructs)}} |
| **Interfaces** | {{formatChangeSign .Summary.TotalInterfaceChanges}} {{formatChange (float64 .Baseline.Report.Overview.TotalInterfaces) (float64 .Current.Report.Overview.TotalInterfaces)}} |
| **Packages** | {{formatChangeSign .Summary.TotalPackageChanges}} {{formatChange (float64 .Baseline.Report.Overview.TotalPackages) (float64 .Current.Report.Overview.TotalPackages)}} |

{{if .Regressions}}
## 🔴 Regressions ({{len .Regressions}} items)

{{range .Regressions}}
- **{{escapeMarkdown .ItemName}}** ({{.Category}}): {{escapeMarkdown .Description}}
  - Previous: {{formatFloat .OldValue}} → Current: {{formatFloat .NewValue}} ({{formatChange .OldValue .NewValue}})
{{end}}
{{end}}

{{if .Improvements}}
## 🟢 Improvements ({{len .Improvements}} items)

{{range .Improvements}}
- **{{escapeMarkdown .ItemName}}** ({{.Category}}): {{escapeMarkdown .Description}}
  - Previous: {{formatFloat .OldValue}} → Current: {{formatFloat .NewValue}} ({{formatChange .OldValue .NewValue}})
{{end}}
{{end}}

## 📋 Detailed Changes

{{if .Changes}}
| Item | Category | Change | Details |
|------|----------|--------|---------|
{{range .Changes}}| {{escapeMarkdown .ItemName}} | {{.Category}} | {{formatChange .OldValue .NewValue}} | {{escapeMarkdown .Description}} |
{{end}}
{{else}}
*No significant changes detected between the two snapshots.*
{{end}}

---
*Comparison generated by [go-stats-generator](https://github.com/opd-ai/go-stats-generator) - Track your code evolution*`
