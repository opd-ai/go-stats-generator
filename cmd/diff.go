package cmd

import (
	"encoding/json"
	"fmt"
	"os"

	"github.com/spf13/cobra"

	"github.com/opd-ai/go-stats-generator/internal/metrics"
	"github.com/opd-ai/go-stats-generator/internal/reporter"
)

var (
	diffOutputFormat string
	diffOutputFile   string
	showOnlyChanges  bool
	thresholdPercent float64
)

// diffCmd represents the diff command
var diffCmd = &cobra.Command{
	Use:   "diff [baseline-report] [comparison-report]",
	Short: "Compare two complexity analysis reports",
	Long: `Compare two complexity analysis reports to determine if complexity was increased or reduced.

The diff command takes two JSON report files generated by the analyze command and produces
a detailed comparison showing:

  • Overall complexity changes (increased/decreased/unchanged)
  • Function-level complexity deltas with percentage changes
  • Struct complexity modifications
  • New functions/structs added or removed
  • Summary statistics of complexity trends
  • Actionable recommendations based on changes

This is particularly useful for:
  • Pre-commit hooks to prevent complexity regressions
  • Code review processes to assess impact of changes
  • Continuous integration pipelines for quality gates
  • Historical analysis of codebase evolution

Examples:
  # Compare two reports with console output
  gostats diff baseline.json current.json

  # Compare reports showing only significant changes (>10%)
  gostats diff baseline.json current.json --threshold 10 --changes-only

  # Generate detailed HTML diff report
  gostats diff baseline.json current.json --format html --output diff-report.html`,

	Args: cobra.ExactArgs(2),
	RunE: runDiff,
}

func init() {
	rootCmd.AddCommand(diffCmd)

	diffCmd.Flags().StringVarP(&diffOutputFormat, "format", "f", "console", "Output format (console, json, html, markdown)")
	diffCmd.Flags().StringVarP(&diffOutputFile, "output", "o", "", "Output file (default: stdout)")
	diffCmd.Flags().BoolVar(&showOnlyChanges, "changes-only", false, "Show only items with changes above threshold")
	diffCmd.Flags().Float64Var(&thresholdPercent, "threshold", 5.0, "Threshold percentage for significant changes")
}

func runDiff(cmd *cobra.Command, args []string) error {
	baselineFile := args[0]
	comparisonFile := args[1]

	// Load baseline report
	baseline, err := loadReport(baselineFile)
	if err != nil {
		return fmt.Errorf("failed to load baseline report: %w", err)
	}

	// Load comparison report
	comparison, err := loadReport(comparisonFile)
	if err != nil {
		return fmt.Errorf("failed to load comparison report: %w", err)
	}

	// Create snapshots from reports
	baselineSnapshot := metrics.MetricsSnapshot{
		ID:       "baseline",
		Report:   *baseline,
		Metadata: metrics.SnapshotMetadata{Timestamp: baseline.Metadata.GeneratedAt},
	}

	comparisonSnapshot := metrics.MetricsSnapshot{
		ID:       "current",
		Report:   *comparison,
		Metadata: metrics.SnapshotMetadata{Timestamp: comparison.Metadata.GeneratedAt},
	}

	// Use default configuration with custom threshold
	config := metrics.DefaultThresholdConfig()
	config.Global.SignificanceLevel = thresholdPercent

	// Generate diff
	diffReport, err := metrics.CompareSnapshots(baselineSnapshot, comparisonSnapshot, config)
	if err != nil {
		return fmt.Errorf("failed to generate diff: %w", err)
	}

	// Create reporter and output results
	rep, err := reporter.NewReporter(diffOutputFormat)
	if err != nil {
		return fmt.Errorf("failed to create reporter: %w", err)
	}

	var output *os.File = os.Stdout
	if diffOutputFile != "" {
		output, err = os.Create(diffOutputFile)
		if err != nil {
			return fmt.Errorf("failed to create output file: %w", err)
		}
		defer output.Close()
	}

	return rep.WriteDiff(output, diffReport)
}

func loadReport(filename string) (*metrics.Report, error) {
	data, err := os.ReadFile(filename)
	if err != nil {
		return nil, fmt.Errorf("failed to read file %s: %w", filename, err)
	}

	var report metrics.Report
	if err := json.Unmarshal(data, &report); err != nil {
		return nil, fmt.Errorf("failed to parse JSON in %s: %w", filename, err)
	}

	return &report, nil
}
